name: Manual Deployment Workflow

on:
  pull_request:
    types: [ labeled ]
  workflow_dispatch:

env:
  SERVICE_NAME: backend

jobs:

  prepare-deployment:
    runs-on: ubuntu-latest
    if: ${{ startswith(github.event.label.name,'build-deploy-') }}
    steps:
      - name: Prepare deployment
        id: prepare-deployment
        run: |
          label=${{ github.event.label.name }}
          echo "environment_name=${label#build-deploy-}" >> $GITHUB_OUTPUT
          echo "Environment: ${label#build-deploy-}"
    outputs:
      environment_name: ${{ steps.prepare-deployment.outputs.environment_name }}

  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.prepare-deployment.outputs.environment_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

#      - name: Configure AWS Credentials via OIDC
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}  # Ensure this is defined in your environment
#          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          echo aws ecr get-login-password --region ${{ vars.AWS_REGION }} \| docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

      - name: Build and Tag Docker Image
        run: |
          echo docker build -t ${{ secrets.REPO_NAME }}:${{ github.sha }} .
          echo docker tag ${{ secrets.REPO_NAME }}:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:${{ github.sha }}
          echo docker tag ${{ secrets.REPO_NAME }}:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:latest

      - name: Push Docker Images to ECR
        run: |
          echo docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:${{ github.sha }}
          echo docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ secrets.REPO_NAME }}:latest

      - name: Update Fargate Service
        run: |
          echo "aws ecs update-service --cluster ..."
  finalize:
    name: Finalize
    needs: [prepare-deployment, deploy]
    if: ${{ always() && github.event.label.name == format('build-test-{}', needs.prepare-deployment.outputs.environment_name) }}
    runs-on: ubuntu-latest
    steps:
      # Always remove the `build-test-image` label at the end (even on failure)
      - name: Remove `build-test-` label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: build-test-${{ needs.prepare-deployment.outputs.environment_name }}